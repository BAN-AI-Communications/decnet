#! /bin/sh
# 
# 
#
# init.d/lat
#
#   and symbolic its link
#
# /sbin/rclat
#
# System startup script for the LAT daemon on SuSE Linux
#
### BEGIN INIT INFO
# Provides: LAT
# Required-Start: $network $remote_fs $syslog
# Required-Stop:  
# Default-Start:  3 5
# Default-Stop:   
# Description:    Start LAT.
### END INIT INFO

# Source SuSE config
.. /etc/rc.config

# Determine the base and follow a runlevel link name.
base=${0##*/}
link=${base#*[SK][0-9][0-9]}

# Force execution if not called by a runlevel directory.
test $link = $base && START_LAT=yes
test "$START_LAT" = yes || exit 0

#
# Look for LATCP binary
#
LATCP=""
[ -x /usr/sbin/latcp ] && LATCP="/usr/sbin/latcp"
[ -x /usr/local/sbin/latcp ] && LATCP="/usr/local/sbin/latcp"

if [ -z "$LATCP" ]
then
	echo "Cannot find latcp at $LATCP"
	exit 5
fi

# Shell functions sourced from /etc/rc.status:
#      rc_check         check and set local and overall rc status
#      rc_status        check and set local and overall rc status
#      rc_status -v     ditto but be verbose in local rc status
#      rc_status -v -r  ditto and clear the local rc status
#      rc_failed        set local and overall rc status to failed
#      rc_reset         clear local rc status (overall remains)
#      rc_exit          exit appropriate to overall rc status
.. /etc/rc.status

# First reset status of this service
rc_reset

# Return values acc. to LSB for all commands but status:
# 0 - success
# 1 - misc error
# 2 - invalid or excess args
# 3 - unimplemented feature (e.g. reload)
# 4 - insufficient privilege
# 5 - program not installed
# 6 - program not configured
# 7 - program is not running
# 
# Note that starting an already running service, stopping
# or restarting a not-running service as well as the restart
# with force-reload (in case signalling is not supported) are
# considered a success.

case "$1" in
    start)
	echo -n "Starting LAT  "
	$LATCP -s

	# Remember status and be verbose
	rc_status -v
	;;
    stop)
	echo -n "Stopping LAT  "
	$LATCP -h

	# Remember status and be verbose
	rc_status -v
	;;
    restart)
	## Stop the service and regardless of whether it was
	## running or not, start it again.
	$0 stop && $0 start

	# Remember status and be quiet
	rc_status
	;;
    *)
	echo "Usage: $0 {start|stop|restart}"
	exit 1
	;;
esac
rc_exit
